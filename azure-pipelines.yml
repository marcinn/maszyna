jobs:
  - job: packlanguagefiles
    pool:
      vmImage: 'ubuntu-20.04'
    displayName: 'Pack and publish translations'
    steps:
    - task: PublishBuildArtifacts@1
      inputs:
        pathtoPublish: 'lang'
        artifactName: 'lang'
      displayName: 'Publish translations'

  - job: validateshaders
    pool:
      vmImage: 'ubuntu-20.04'
    displayName: 'Validate shaders'
    steps:
    - script: |
        sudo apt-get update -y
        sudo apt-get install -y glslang-tools
      displayName: 'Install dependencies'
    - script: |
        cd ci_shadervalidator
        ./build.sh
      displayName: 'Build validator'
    - script: |
        cd ci_shadervalidator
        ./validateshaders
      displayName: 'Validate shaders'
    - task: PublishBuildArtifacts@1
      inputs:
        pathtoPublish: 'shaders'
        artifactName: shaders
      displayName: 'Publish shaders'

  - job: ubuntu1804
    pool:
      vmImage: 'Ubuntu-18.04'
    displayName: 'Ubuntu 18.04 x86-64'
    steps:
    - script: |
        sudo apt-get update -y
        sudo apt-get install -y libglfw3-dev python2.7-dev libpng-dev libopenal-dev libluajit-5.1-dev libserialport-dev libsndfile1-dev
        sudo apt-get install -y gcc-8 g++-8
        sudo update-alternatives --install /usr/bin/g++ g++ /usr/bin/g++-8 100
        sudo update-alternatives --install /usr/bin/gcc gcc /usr/bin/gcc-8 100
        cd ref
        git clone "https://github.com/chriskohlhoff/asio" --depth 1 --branch asio-1-12-2 -q
      displayName: 'Install dependencies'
    - script: |
        mkdir build
        cd build
        cmake .. -DCMAKE_BUILD_TYPE=Release -DWITH_ZMQ=OFF -DWITH_OPENVR=OFF -DUSE_LTO=ON
        cmake --build .
      displayName: 'Build'
    - task: PublishBuildArtifacts@1
      inputs:
        pathtoPublish: 'build/bin'
        artifactName: binaries_linux
      displayName: 'Publish binaries'

  - job: macos1015
    pool:
      vmImage: 'macOS-10.15'
    displayName: 'MacOS 10.15 x86-64'
    steps:
    - script: |
        sudo xcode-select -s /Applications/Xcode_12.3.app
      displayName: 'Setup Xcode'
    - script: |
        cd /tmp
        wget https://s2.milek7.pl/macos_vcpkg_cache_x64.tar.gz
        tar -xf macos_vcpkg_cache_x64.tar.gz
        mv tmp/vcpkg vcpkg
        rmdir tmp
        rm macos_vcpkg_cache_x64.tar.gz
      displayName: 'Install dependencies'
    - script: |
        mkdir build
        cd build
        cmake .. -DCMAKE_BUILD_TYPE=Release -DCMAKE_OSX_ARCHITECTURES=x86_64 -DCMAKE_TOOLCHAIN_FILE=/tmp/vcpkg/scripts/buildsystems/vcpkg.cmake -DVCPKG_TARGET_TRIPLET=x64-osx -DWITH_ZMQ=OFF -DWITH_OPENVR=OFF -DWITH_UART=OFF -DUSE_LTO=ON -DWITH_LUA=OFF
        cmake --build .
      displayName: 'Build'
    - task: PublishBuildArtifacts@1
      inputs:
        pathtoPublish: 'build/bin'
        artifactName: binaries_macos
      displayName: 'Publish binaries'

  - job: macos1015_imgui_gl2
    pool:
      vmImage: 'macOS-10.15'
    displayName: 'MacOS 10.15 x86-64 ImGui GL2'
    steps:
    - script: |
        sudo xcode-select -s /Applications/Xcode_12.3.app
      displayName: 'Setup Xcode'
    - script: |
        cd /tmp
        wget https://s2.milek7.pl/macos_vcpkg_cache_x64.tar.gz
        tar -xf macos_vcpkg_cache_x64.tar.gz
        mv tmp/vcpkg vcpkg
        rmdir tmp
        rm macos_vcpkg_cache_x64.tar.gz
      displayName: 'Install dependencies'
    - script: |
        mkdir build
        cd build
        cmake .. -DCMAKE_BUILD_TYPE=Release -DCMAKE_OSX_ARCHITECTURES=x86_64 -DCMAKE_TOOLCHAIN_FILE=/tmp/vcpkg/scripts/buildsystems/vcpkg.cmake -DVCPKG_TARGET_TRIPLET=x64-osx -DWITH_ZMQ=OFF -DWITH_OPENVR=OFF -DWITH_UART=OFF -DUSE_IMGUI_GL3=OFF -DUSE_LTO=ON -DWITH_LUA=OFF
        cmake --build .
      displayName: 'Build'
    - task: PublishBuildArtifacts@1
      inputs:
        pathtoPublish: 'build/bin'
        artifactName: binaries_macos_imgui_gl2
      displayName: 'Publish binaries'

  - job: macos11_arm64
    pool:
      vmImage: 'macOS-10.15'
    displayName: 'MacOS 11.1 ARM64'
    steps:
    - script: |
        sudo xcode-select -s /Applications/Xcode_12.3.app
      displayName: 'Setup Xcode'
    - script: |
        cd /tmp
        wget https://s2.milek7.pl/macos_vcpkg_cache_arm64.tar.gz
        tar -xf macos_vcpkg_cache_arm64.tar.gz
        mv tmp/vcpkg vcpkg
        rmdir tmp
        rm macos_vcpkg_cache_arm64.tar.gz
      displayName: 'Install dependencies'
    - script: |
        mkdir build
        cd build
        cmake .. -DCMAKE_BUILD_TYPE=Release -DCMAKE_OSX_ARCHITECTURES=arm64 -DCMAKE_TOOLCHAIN_FILE=/tmp/vcpkg/scripts/buildsystems/vcpkg.cmake -DVCPKG_TARGET_TRIPLET=arm64-osx -DWITH_ZMQ=OFF -DWITH_OPENVR=OFF -DWITH_UART=OFF -DUSE_LTO=ON -DWITH_LUA=OFF
        cmake --build .
      displayName: 'Build'
    - task: PublishBuildArtifacts@1
      inputs:
        pathtoPublish: 'build/bin'
        artifactName: binaries_macos_arm64
      displayName: 'Publish binaries'

  - job: windows_x64
    pool:
      vmImage: 'windows-2019'
    displayName: 'Windows VS2019 x86-64'
    steps:
    - script: |
        cd ref
        git clone "https://github.com/chriskohlhoff/asio" --depth 1 --branch asio-1-12-2 -q
        curl -o crashpad.zip "http://get.backtrace.io/crashpad/builds/release/x86-64/crashpad-2020-07-01-release-x64-558c9614e3819179f30b92541450f5ac643afce5.zip"
        unzip crashpad.zip
        move crashpad-2020-07-01-release-x64-558c9614e3819179f30b92541450f5ac643afce5 crashpad
      displayName: 'Download extra dependencies'
    - script: |
        mkdir build
        cd build
        cmake .. -A x64 -DUSE_LTO=ON -DWITH_CRASHPAD=ON
        cmake --build . --config RelWithDebInfo
      displayName: 'Build'
    - script: |
        cd build
        7z a package.zip .\bin\RelWithDebInfo\*.exe .\pdb\RelWithDebInfo\*.pdb
        curl --data-binary @package.zip -H "Expect:" "https://eu07.sp.backtrace.io:6098/post?format=symbols&token=4eeba9395fae661927e23679fc36f2237416ec056ef75399e894d597ad518c6c"
        del .\bin\RelWithDebInfo\*.iobj
        del .\bin\RelWithDebInfo\*.ipdb
      displayName: 'Upload symbols'
    - task: PublishBuildArtifacts@1
      inputs:
        pathtoPublish: 'build/bin'
        artifactName: binaries_win64
      displayName: 'Publish binaries'
    - task: PublishBuildArtifacts@1
      inputs:
        pathtoPublish: 'build/package.zip'
        artifactName: symbols_win64
      displayName: 'Publish symbols'

  - job: windows_x64_dbg
    pool:
      vmImage: 'windows-2019'
    displayName: 'Windows VS2019 Debug'
    steps:
    - script: |
        cd ref
        git clone "https://github.com/chriskohlhoff/asio" --depth 1 --branch asio-1-12-2 -q
      displayName: 'Download extra dependencies'
    - script: |
        mkdir build
        cd build
        cmake .. -A x64
        cmake --build . --config Debug
      displayName: 'Build'

  - job: windows_x32
    pool:
      vmImage: 'windows-2019'
    displayName: 'Windows VS2019 x86'
    steps:
    - script: |
        cd ref
        git clone "https://github.com/chriskohlhoff/asio" --depth 1 --branch asio-1-12-2 -q
        curl -o crashpad.zip "http://get.backtrace.io/crashpad/builds/release/x86/crashpad-2020-07-01-release-x86-558c9614e3819179f30b92541450f5ac643afce5.zip"
        unzip crashpad.zip
        move crashpad-2020-07-01-release-x86-558c9614e3819179f30b92541450f5ac643afce5 crashpad
      displayName: 'Download extra dependencies'
    - script: |
        mkdir build
        cd build
        cmake .. -A Win32 -T v141_xp -DUSE_LTO=ON -DWITH_CRASHPAD=ON
        cmake --build . --config RelWithDebInfo
      displayName: 'Build'
    - script: |
        cd build
        7z a package.zip .\pdb\RelWithDebInfo\*.pdb
        curl --data-binary @package.zip -H "Expect:" "https://eu07.sp.backtrace.io:6098/post?format=symbols&token=4eeba9395fae661927e23679fc36f2237416ec056ef75399e894d597ad518c6c"
        del .\bin\RelWithDebInfo\*.iobj
        del .\bin\RelWithDebInfo\*.ipdb
      displayName: 'Upload symbols'
    - task: PublishBuildArtifacts@1
      inputs:
        pathtoPublish: 'build/bin'
        artifactName: binaries_win32
      displayName: 'Publish binaries'
    - task: PublishBuildArtifacts@1
      inputs:
        pathtoPublish: 'build/package.zip'
        artifactName: symbols_win32
      displayName: 'Publish symbols'
